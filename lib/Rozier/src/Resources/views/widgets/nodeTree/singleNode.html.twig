{#
This template is using NodeTreeDto and TagTreeDto objects to render a node tree.
#}
{% set source = node.nodeSource|default(node.nodeSources.first) %}
{% if source.title %}
    {% set name = source.title|replace({'${':'--'}) %} {# Remove VueJS placeholder marks #}
{% else %}
    {% set name = node.nodeName|replace({'${':'--'}) %} {# Remove VueJS placeholder marks #}
{% endif %}
{% set type = node.nodeType.name %}

{% set classes = [
    type|lower,
    'nodetree-element'
] %}

{% set classes = classes|merge(['uk-nestable-item']) %}
{% if not node.isHidingChildren and
    not node.nodeType.isHidingNodes and
    not node.nodeType.isHidingNonReachableNodes %}
    {# Get children using EntityListManager for more control. #}
    {% set children = nodeTree.getChildrenNodes(node, true) %}
{% elseif not node.isHidingChildren and
    not node.nodeType.isHidingNodes and
    node.nodeType.isHidingNonReachableNodes %}
    {# Get children using EntityListManager for more control. #}
    {% set children = nodeTree.getReachableChildrenNodes(node, true) %}
{% else %}
    {% set children = false %}
{% endif %}

{% if children|length > 0 %}
    {% set classes = classes|merge(['has-children']) %}
{% endif %}

{% if nodeTree.isStackTree and node.tags|length %}
    {% set classes = classes|merge(['has-tag']) %}
{% endif %}

{% set innerClasses = [
'tree-element-inner',
'uk-nestable-panel',
] %}
{% if node.isHome and node.isHidingChildren %}{% set innerClasses = innerClasses|merge(['home-stack']) %}{% endif %}
{% if node.isHome %}{% set innerClasses = innerClasses|merge(['home-node']) %}{% endif %}
{% if node.isHidingChildren %}{% set innerClasses = innerClasses|merge(['stack-node']) %}{% endif %}
{% if not node.isVisible %}{% set innerClasses = innerClasses|merge(['hidden-node']) %}{% endif %}
{% if not node.isPublished %}{% set innerClasses = innerClasses|merge(['unpublished-node']) %}{% endif %}
{% if not node.isArchived %}{% set innerClasses = innerClasses|merge(['archived-node']) %}{% endif %}
{% if not node.isLocked %}{% set innerClasses = innerClasses|merge(['locked-node']) %}{% endif %}
{% if nodeTree.isStackTree and node.nodeType.isPublishable and source.publishedAt %}
    {% set innerClasses = innerClasses|merge(['datetime-publishable']) %}
    {% if source.publishedAt > date() %}
        {% set innerClasses = innerClasses|merge(['datetime-publishable-future']) %}
    {% endif %}
{% endif %}

<li data-node-id="{{ node.id }}" class="{{ classes|join(' ') }}">
    {% if not mainNodeTree and not nodeTree.isStackTree %}
        <span class="nodetree-list-item-color"></span>
    {% endif %}
    <div class="{{ innerClasses|join(' ') }}">
        {% block nodetree_handle %}
            {# Disable nestable handling if node-tree prevents reordering on root level only #}
            <div class="{% if canReorder %}uk-nestable-handle{% else %}non-nestable-handle{% endif %}"
                {%- if not mainNodeTree and not nodeTree.isStackTree -%}
                title="{{ node.nodeType.displayName }}"
                data-uk-tooltip="{animation:true}"{%- endif -%}>
                {% if not mainNodeTree and not nodeTree.isStackTree %}
                    {% set thumbnail = nodeTree.getOneDisplayableDocument(node) %}
                    {% if thumbnail %}
                        <figure class="nodetree-element-img">
                            {{ thumbnail|display({"fit":"60x60", "quality": 70}) }}
                        </figure>
                    {% endif %}
                {% endif %}

                {% if node.isHidingChildren and not node.isHome %}
                    <i class="uk-icon-folder"></i>
                    <span class="icon-stack-folder"></span>
                    <span class="icon-stack-folder icon-stack-folder-final"></span>
                {% endif %}
                {% if node.isHome and not node.isHidingChildren and not node.published %}
                    <i class="uk-icon-rz-home-unpublished"></i>
                {% elseif node.isHome and not node.isHidingChildren %}
                    <i class="uk-icon-rz-home"></i>
                {% elseif node.isHome and node.isHidingChildren %}
                    <i class="uk-icon-rz-building"></i>
                {% endif %}
                {% if nodeTree.isStackTree and node.nodeType.isPublishable and source.publishedAt %}
                    <div class="nodetree-published-at uk-badge">
                        <i class="uk-icon-clock-o"></i> {{ source.publishedAt|format_date('short', locale=app.request.locale) }}
                    </div>
                {% endif %}
            </div>
        {% endblock %}

        {% block nodetree_element_name %}
            <div class="tree-element-name nodetree-element-name"{% if nodeTree.translation is rtl %} dir="rtl"{% endif %}>
                {% if node.isHidingChildren %}
                    <a href="{{ path('nodesTreePage', {
                        nodeId: node.id,
                        translationId: nodeTree.translation.id
                    }) }}">{{- name -}}</a>
                {% else %}
                    <a href="{{ path('nodesEditSourcePage', {
                        nodeId: node.id,
                        translationId: nodeTree.translation.id,
                        referer: parent ? path('nodesEditSourcePage', {
                            nodeId: parent.id,
                            translationId: nodeTree.translation.id,
                        }) : null
                    }) }}">{{- name -}}</a>
                {% endif %}
            </div>
        {% endblock %}

        {% block nodetree_tags %}
            {% if nodeTree.isStackTree %}
                {% set tags = nodeTree.getTags(node) %}
                {% if tags|length %}
                    <div class="nodetree-tags">
                        {% for tag in tags %}
                            <a href="?tagId={{ tag.id }}" class="uk-badge"><i class="uk-icon-tag"></i> {{ tag.name|default(tag.tagName) -}}</a>
                        {% endfor %}
                    </div>
                {% endif %}
            {% endif %}
        {% endblock %}

        {% block nodetree_custom %}{# Override this block from your theme or app #}{% endblock %}

        {% block nodetree_selection %}
            {% if nodeTree.isStackTree %}
                <div class="nodetree-bulk-selection">
                    <input class="node-checkbox" type="checkbox" name="bulk-selection[]" value="{{ node.id }}" />
                </div>
            {% endif %}
        {% endblock %}

        {% block nodetree_contextual_menu %}
            {%- include '@RoadizRozier/widgets/nodeTree/contextualMenu.html.twig' with {
                'node': node,
                'nodeTree': nodeTree
            } only -%}
        {% endblock %}

        {% if children %}
            <div class="minus" data-nestable-action="toggle"></div>
        {% endif %}
    </div>

    {% set subListClasses = ['uk-nestable-list'] %}
    {% if not mainNodeTree and not nodeTree.isStackTree %}
        {% set subListClasses = subListClasses|merge(['children-node-widget-list']) %}
    {% endif %}
    {% if node.isHidingChildren or node.nodeType.isHidingNodes or not children %}
        {% set subListClasses = subListClasses|merge(['empty']) %}
    {% endif %}
    {% apply spaceless %}
        {% if children %}
        <ul class="{{ subListClasses|join(' ') }}" data-parent-node-id="{{ node.id }}">
            {#
             # For drag&drop ease, we don't create nested lists
             # We will have to check after OR inside drag status
             #}
                {% for subNode in children %}
                    {% include '@RoadizRozier/widgets/nodeTree/singleNode.html.twig' with {
                        "node":subNode,
                        "parent":node,
                        "nodeTree":nodeTree,
                        "mainNodeTree":mainNodeTree,
                        "nodeStatuses":nodeStatuses,
                        "level": level + 1,
                        'canReorder': (node.childrenOrder == 'position'),
                    } only %}
                {% endfor %}
        </ul>
        {% endif %}
    {% endapply %}
</li>
