<?php

declare(strict_types=1);

namespace Themes\Rozier\Controllers\Users;

use RZ\Roadiz\Core\AbstractEntities\PersistableInterface;
use RZ\Roadiz\CoreBundle\Entity\Role;
use RZ\Roadiz\CoreBundle\Entity\User;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Themes\Rozier\Controllers\AbstractAdminWithBulkController;
use Themes\Rozier\Forms\UserDetailsType;
use Themes\Rozier\Forms\UserType;
use Twig\Error\RuntimeError;

class UsersController extends AbstractAdminWithBulkController
{
    protected function supports(PersistableInterface $item): bool
    {
        return $item instanceof User;
    }

    protected function getNamespace(): string
    {
        return 'user';
    }

    protected function createEmptyItem(Request $request): User
    {
        $user = new User();
        $user->sendCreationConfirmationEmail(true);
        return $user;
    }

    protected function getTemplateFolder(): string
    {
        return '@RoadizRozier/users';
    }

    protected function getRequiredRole(): string
    {
        return 'ROLE_ACCESS_USERS';
    }

    protected function getRequiredEditionRole(): string
    {
        // Allow any backoffice user to access user edition before
        // checking if current editing item is the same as current user.
        return 'ROLE_BACKEND_USER';
    }

    protected function getRequiredDeletionRole(): string
    {
        return 'ROLE_ACCESS_USERS_DELETE';
    }

    protected function getEntityClass(): string
    {
        return User::class;
    }

    protected function getFormType(): string
    {
        return UserType::class;
    }

    protected function getDefaultRouteName(): string
    {
        return 'usersHomePage';
    }

    protected function getEditRouteName(): string
    {
        return 'usersEditPage';
    }

    protected function getBulkDeleteRouteName(): ?string
    {
        return 'usersBulkDeletePage';
    }

    protected function denyAccessUnlessItemGranted(PersistableInterface $item): void
    {
        parent::denyAccessUnlessItemGranted($item);

        if (!$item instanceof User) {
            throw new \RuntimeException('Invalid item type.');
        }
        $requestUser = $this->getUser();
        if (
            !(
                $this->isGranted('ROLE_ACCESS_USERS') ||
                ($requestUser instanceof User && $requestUser->getId() === $item->getId())
            )
        ) {
            throw $this->createAccessDeniedException("You don't have access to this page: ROLE_ACCESS_USERS");
        }
        if (!$this->isGranted(Role::ROLE_SUPERADMIN) && $item->isSuperAdmin()) {
            throw $this->createAccessDeniedException("You cannot edit a super admin.");
        }
    }

    protected function getEntityName(PersistableInterface $item): string
    {
        if (!$item instanceof User) {
            throw new \RuntimeException('Invalid item type.');
        }
        return $item->getUsername();
    }

    protected function getDefaultOrder(Request $request): array
    {
        return ['username' => 'ASC'];
    }

    protected function createUpdateEvent(PersistableInterface $item)
    {
        if (!$item instanceof User) {
            throw new \RuntimeException('Invalid item type.');
        }
        /*
         * If pictureUrl is empty, use default Gravatar image.
         */
        if ($item->getPictureUrl() == '') {
            $item->setPictureUrl($item->getGravatarUrl());
        }

        return parent::createUpdateEvent($item); // TODO: Change the autogenerated stub
    }

    /**
     * @param Request $request
     * @param int $id
     *
     * @return Response
     * @throws RuntimeError
     */
    public function editDetailsAction(Request $request, int $id): Response
    {
        $this->denyAccessUnlessGranted($this->getRequiredEditionRole());
        $this->additionalAssignation($request);

        /** @var mixed|object|null $item */
        $item = $this->em()->find($this->getEntityClass(), $id);
        if (!($item instanceof PersistableInterface)) {
            throw $this->createNotFoundException();
        }

        $this->prepareWorkingItem($item);
        $this->denyAccessUnlessItemGranted($item);

        $form = $this->createForm(UserDetailsType::class, $item);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /*
             * Events are dispatched before entity manager is flushed
             * to be able to throw exceptions before it is persisted.
             */
            $event = $this->createUpdateEvent($item);
            $this->dispatchSingleOrMultipleEvent($event);
            $this->em()->flush();

            /*
             * Event that requires that EM is flushed
             */
            $postEvent = $this->createPostUpdateEvent($item);
            $this->dispatchSingleOrMultipleEvent($postEvent);

            $msg = $this->getTranslator()->trans(
                '%namespace%.%item%.was_updated',
                [
                    '%item%' => $this->getEntityName($item),
                    '%namespace%' => $this->getTranslator()->trans($this->getNamespace())
                ]
            );
            $this->publishConfirmMessage($request, $msg, $item);

            /*
             * Force redirect to avoid resending form when refreshing page
             */
            return $this->redirectToRoute(
                'usersEditDetailsPage',
                ['id' => $item->getId()]
            );
        }

        $this->assignation['form'] = $form->createView();
        $this->assignation['item'] = $item;

        return $this->render(
            $this->getTemplateFolder() . '/editDetails.html.twig',
            $this->assignation,
            null,
            $this->getTemplateNamespace()
        );
    }



    protected function additionalAssignation(Request $request): void
    {
        parent::additionalAssignation($request);

        if (null !== $this->getBulkEnableRouteName()) {
            $bulkEnableForm = $this->createEnableBulkForm(true);
            $this->assignation['bulkEnableForm'] = $bulkEnableForm->createView();
            $this->assignation['hasBulkActions'] = true;
        }

        if (null !== $this->getBulkDisableRouteName()) {
            $bulkDisableForm = $this->createDisableBulkForm(true);
            $this->assignation['bulkDisableForm'] = $bulkDisableForm->createView();
            $this->assignation['hasBulkActions'] = true;
        }
    }

    /*
     * User specific bulk actions
     */

    protected function createEnableBulkForm(bool $get = false, ?array $data = null): FormInterface
    {
        return $this->createBulkForm(
            $this->getBulkEnableRouteName(),
            'bulk-enable',
            $get,
            $data
        );
    }

    protected function createDisableBulkForm(bool $get = false, ?array $data = null): FormInterface
    {
        return $this->createBulkForm(
            $this->getBulkDisableRouteName(),
            'bulk-disable',
            $get,
            $data
        );
    }

    private function getBulkEnableRouteName(): string
    {
        return 'usersBulkEnablePage';
    }

    private function getBulkDisableRouteName(): string
    {
        return 'usersBulkDisablePage';
    }

    public function bulkEnableAction(Request $request): Response
    {
        return $this->bulkAction(
            $request,
            $this->getRequiredRole(),
            $this->createEnableBulkForm(true),
            $this->createEnableBulkForm(),
            function (string $ids) {
                return $this->createEnableBulkForm(false, [
                    'id' => $ids,
                ]);
            },
            $this->getTemplateFolder() . '/bulk_enable.html.twig',
            '%namespace%.%item%.was_enabled',
            function (PersistableInterface $item) {
                if (!$item instanceof User) {
                    throw new \RuntimeException('Invalid item type.');
                }
                $item->setEnabled(true);
            },
            'bulkEnableForm'
        );
    }

    public function bulkDisableAction(Request $request): Response
    {
        return $this->bulkAction(
            $request,
            $this->getRequiredRole(),
            $this->createDisableBulkForm(true),
            $this->createDisableBulkForm(),
            function (string $ids) {
                return $this->createDisableBulkForm(false, [
                    'id' => $ids,
                ]);
            },
            $this->getTemplateFolder() . '/bulk_disable.html.twig',
            '%namespace%.%item%.was_disabled',
            function (PersistableInterface $item) {
                if (!$item instanceof User) {
                    throw new \RuntimeException('Invalid item type.');
                }
                $item->setEnabled(false);
            },
            'bulkDisableForm'
        );
    }
}
