class r extends HTMLElement{constructor(){super(),this.debounce=null,this.input=this.querySelector(".rz-tag-autocomplete"),this.onInput=this.onInput.bind(this),this.onKeyDown=this.onKeyDown.bind(this),this.resize=this.resize.bind(this)}get value(){return this.input?this.input.value:""}get searchPath(){return this.getAttribute("data-search-path")}get csrfToken(){return this.getAttribute("data-csrf-token")}connectedCallback(){this.input&&(this.input.setAttribute("autocomplete","off"),this.input.addEventListener("keydown",this.onKeyDown),this.input.addEventListener("input",this.onInput),window.addEventListener("resize",this.resize))}disconnectedCallback(){this.input&&(this.input.removeEventListener("keydown",this.onKeyDown),this.input.removeEventListener("input",this.onInput),window.removeEventListener("resize",this.resize))}onKeyDown(t){t.keyCode===9&&this.input.dataset.menuActive==="true"&&t.preventDefault()}async onInput(t){const e=this.extractLast(this.value);if(e.length<2){this.removeAutocompleteMenu();return}const n={_action:"tagAutocomplete",_token:this.csrfToken,search:this.extractLast(e)},i=this.searchPath+"?"+new URLSearchParams(n);this.debounce&&(window.clearTimeout(this.debounce),this.debounce=null),this.debounce=window.setTimeout(async()=>{const u=await fetch(i,{headers:{"X-Requested-With":"XMLHttpRequest"}});this.showAutocompleteMenu(await u.json())},300)}showAutocompleteMenu(t){this.removeAutocompleteMenu();const e=document.createElement("ul");e.className="ui-menu ui-widget ui-widget-content ui-autocomplete ui-front",t.forEach(n=>{const i=document.createElement("li");i.className="ui-menu-item",i.textContent=n,i.addEventListener("mousedown",u=>{u.preventDefault();let s=this.split(this.input.value);s.pop(),s.push(n),s.push(""),this.input.value=s.join(", "),this.removeAutocompleteMenu()}),e.appendChild(i)}),this.appendChild(e),this.input.dataset.menuActive="true",this.resize(),document.addEventListener("click",this.handleOutsideClick)}resize(){const t=this.querySelector(".ui-autocomplete");t&&(this.input.getBoundingClientRect(),t.style.left=`${this.input.offsetLeft}px`,t.style.top=`${this.input.offsetTop+this.input.offsetHeight}px`)}removeAutocompleteMenu(){const t=this.querySelector(".ui-autocomplete");t&&(t.remove(),document.removeEventListener("click",this.handleOutsideClick)),this.input&&(this.input.dataset.menuActive="false")}handleOutsideClick=t=>{t.target.closest(".ui-autocomplete")||this.removeAutocompleteMenu()};unbind(){}split(t){return t.split(/,\s*/)}extractLast(t){return this.split(t).pop()}}export{r as default};
