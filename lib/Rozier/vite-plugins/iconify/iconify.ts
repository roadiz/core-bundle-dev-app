import { promises as fs } from 'fs'
import path from 'path'
import { getIconsCSS } from '@iconify/utils'
import { locate } from '@iconify/json'
import { IconSet } from '@iconify/tools'
import { importDirectory } from '@iconify/tools'
import { cleanupSVG, parseColors, runSVGO } from '@iconify/tools'

type IconifyCollectionConfig = {
  prefix: string // Iconify prefix key or custom if srcDir is provided
  srcDir?: string // Folder with SVG files
  icons?: string[] // icon names filtered from collection
  outputName?: string
}

type IconifyCollectionOptions = {
  outputDir: string
}

async function getIconSetFromDirectory(path: string, prefix: string) {
  const iconSet = await importDirectory(path, { prefix })

  // clean & optimisation
  for (const name of iconSet.list()) {
    const svg = iconSet.toSVG(name)

    if (!svg) {
      console.warn(`Error on ${name}`)
      continue
    }

    await cleanupSVG(svg)
    await parseColors(svg, { defaultColor: 'currentColor' })
    await runSVGO(svg)

    iconSet.fromSVG(name, svg)
  }

  return iconSet
}

async function generateIconNameFile(outputDir: string, prefix: string, names: string[]) {
  const iconsListPath = path.resolve(process.cwd(), outputDir, `${prefix}.ts`)
  const jsContent
    = `/**
 * File auto-generated by Iconify plugin
 */
export default [
  '${names.map(name => `${name}`).join('\',\n  \'')}',
]
`

  await fs.writeFile(iconsListPath, jsContent, 'utf-8')
}

// TODO: add HMR on svg srcDir and icon collection file
export default function initCollections(
  collections: IconifyCollectionConfig[],
  options?: IconifyCollectionOptions,
) {
  const finalOptions: IconifyCollectionOptions = {
    outputDir: 'app/assets/css/icons',
    ...options,
  }
  return {
    name: 'init-iconify-collections',
    async buildStart() {
      // Array to store paths for the index file generation
      const cssFilePaths: string[] = []

      const promises = collections.map(async (collection) => {
        const { prefix, srcDir, icons } = collection
        let iconSet: IconSet | null = null

        try {
          if (srcDir) {
            // Load icon set from local SVG files if srcDir is provided
            const srcPath = path.resolve(process.cwd(), srcDir)
            iconSet = await getIconSetFromDirectory(srcPath, prefix)

            if (!icons?.length) {
              // Generate a list of available icon names (useful for local collections)
              await generateIconNameFile(
                'vite-plugins/iconify/collections',
                prefix,
                iconSet.list(),
              )
            }
          }
          else {
            // Try to load the official Iconify JSON package
            const iconifyFilePath = locate(prefix)
            const file = await fs.readFile(iconifyFilePath, 'utf8')
            iconSet = new IconSet(JSON.parse(file))
          }
        }
        catch {
          if (!iconSet) {
            console.warn(`Can't find json collection for: ${prefix}`)
            return
          }
        }

        // Filter the icon set to include only the requested names, if any were provided.
        if (icons?.length) {
          const available = new Set(iconSet.list())
          const missing = icons.filter(i => !available.has(i))

          if (missing.length) {
            console.warn?.(`⚠️ Missing icons in "${prefix}": ${missing.join(', ')}`)
          }
          for (const name of iconSet.list()) {
            if (!icons.includes(name)) iconSet.remove(name)
          }
        }

        const json = iconSet.export(true) // true = optimization for Iconify
        await fs.mkdir(finalOptions.outputDir, { recursive: true })
        const outputPath = path.resolve(process.cwd(), finalOptions.outputDir)

        // Generate the optimized CSS code
        const css = getIconsCSS(json, iconSet.list(), {
          format: 'compressed',
          iconSelector: '.rz-icon-{prefix}--{name}',
          commonSelector: '[class^="rz-icon-{prefix}"]',
        })

        const cssFileName = `${collection.outputName || prefix}.css`
        const cssFilePath = path.join(outputPath, cssFileName)
        await fs.writeFile(cssFilePath, css, 'utf-8')
        cssFilePaths.push(`./${cssFileName}`)

        console.info(`✅ CSS collection generate : ${cssFilePath}`)
      })

      await Promise.all(promises)

      // Generate the main CSS index file that imports all collection files
      const indexCssPath = path.join(finalOptions.outputDir, 'index.css')
      const cssContentImports = cssFilePaths
        .map(file => `@import '${file}';`)
        .join('\n')

      const cssFileContent
        = `
 /* File auto-generated by Iconify plugin */
${cssContentImports}
`

      await fs.writeFile(indexCssPath, cssFileContent, 'utf-8')
      console.info(`✅ Index CSS generate: ${indexCssPath}`)
    },
  }
}
