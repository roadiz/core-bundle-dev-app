class d extends HTMLElement{constructor(){super(),this._listeners=new Map}disconnectedCallback(){this.unlistenAll()}listen(t,s,n,f=!1,...a){if(!t){console.warn(`Target ${t} is not valid for ${s} listener`);return}if(!s){console.warn(`Event type ${s} is not valid for listener on target ${t}`);return}if(typeof n!="function"){console.warn(`Callback for ${s} listener on target ${t} is not a function`);return}const o="length"in t?Array.from(t):[t];for(let e=0;e<o.length;e++){const l=o[e];this._listeners.has(l)||this._listeners.set(l,new Map);const i=this._listeners.get(l);i.has(s)||i.set(s,[]);const r=i.get(s);if(r.some(c=>c.callback===n)){const c=n.name&&n.name.length>0?n.name:"anonymous function";console.warn(`Listener for type ${s} with callback ${c} already exists`);return}const h=n.bind(this,...a);r.push({callback:n,options:f,boundCallback:h}),l.addEventListener(s,h,f)}}unlisten(t,s,n){if(!t)return;const f="length"in t?Array.from(t):[t];for(let a=0;a<f.length;a++){const o=f[a];if(!this._listeners.has(o))continue;const e=this._listeners.get(o);e.forEach((l,i)=>{if(!s||i===s)if(l.forEach(r=>{(!n||r.callback===n)&&o.removeEventListener(i,r.boundCallback,r.options)}),n){const r=l.filter(h=>h.callback!==n);r.length>0?e.set(i,r):e.delete(i)}else e.delete(i)}),e.size===0&&this._listeners.delete(o)}}unlistenAll(){this._listeners.forEach((t,s)=>{this.unlisten(s)}),this._listeners.clear()}}export{d as R};
